{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Cherry","text":"Todo"},{"location":"#important-links","title":"Important links","text":"<ul> <li>[ ] Documentation page</li> <li>Project page</li> <li>[ ] Technical specification</li> </ul> <p>Specific sections inside the documentation page:</p> <ul> <li>[ ] Setup?</li> <li>[ ] Quickstart</li> <li>[ ] Onboarding guide</li> <li>[ ] Testing locally</li> <li>[ ] Testing via dev stack</li> <li>[ ] Deploying to production</li> <li>[ ] Runbook</li> <li>[x] Logging System</li> <li>[ ] API</li> <li>[ ] Technical specification (generated)</li> </ul>"},{"location":"code_standards/","title":"Code standards","text":""},{"location":"code_standards/#logging-rules","title":"Logging rules","text":"<p>We came up with these rules to help debugging but also avoid clutter and info leaking to the public.</p> <ol> <li>Always use <code>WrapErrorWithDetails</code> at the deepest level of your code. If you got an error from a code you called    yourself, reconsider wrapping the error with this.<ul> <li>If you want to wrap an error, use our custom <code>ErrorWrapper</code>.</li> </ul> </li> <li>It's okay to log on every level of the stack using <code>LogDetailedError</code>.</li> <li>Do not show the client the errors as it is! Use <code>ErrorWrapper.UserMessage</code>!</li> </ol>"},{"location":"code_standards/#go-imports","title":"Go imports","text":"<p>Follow this structure:</p> <pre><code>import (\n    // system\n    \"context\"\n    \"errors\"\n    \"net/http\"\n\n    // external\n    \"github.com/twitchtv/twirp\"\n    \"golang.org/x/crypto/bcrypt\"\n\n    // internal remote: use go get\n    \"github.com/CherryXenon/cherry_api/rpc/cherry\"\n\n    // internal local\n    \"github.com/CherryXenon/Cherry/internal/server\"\n    \"github.com/CherryXenon/Cherry/internal/util\"\n    \"github.com/CherryXenon/Cherry/pkg/models\"\n)\n</code></pre>"},{"location":"contributing/","title":"Contributing to Cherry Backend","text":"<p>Thank you for considering contributing to Cherry Backend! This document outlines the guidelines for contributing to this project.</p>"},{"location":"contributing/#commit-message-convention","title":"Commit Message Convention","text":"<p>We follow the Conventional Commits specification for our commit messages. This leads to more readable messages that are easy to follow when looking through the project history.</p>"},{"location":"contributing/#commit-message-format","title":"Commit Message Format","text":"<p>Each commit message consists of a header, a body, and a footer. The header has a special format that includes a type, a scope, and a subject:</p> <pre><code>&lt;type&gt;(&lt;scope&gt;): &lt;subject&gt;\n&lt;BLANK LINE&gt;\n&lt;body&gt;\n&lt;BLANK LINE&gt;\n&lt;footer&gt;\n</code></pre> <p>The header is mandatory and the scope of the header is optional.</p>"},{"location":"contributing/#type","title":"Type","text":"<p>Must be one of the following:</p> <ul> <li>feat: A new feature</li> <li>fix: A bug fix</li> <li>docs: Documentation only changes</li> <li>style: Changes that do not affect the meaning of the code (white-space, formatting, missing semi-colons, etc)</li> <li>refactor: A code change that neither fixes a bug nor adds a feature</li> <li>perf: A code change that improves performance</li> <li>test: Adding missing tests or correcting existing tests</li> <li>chore: Changes to the build process or auxiliary tools and libraries such as documentation generation</li> <li>ci: Changes to our CI configuration files and scripts</li> <li>build: Changes that affect the build system or external dependencies</li> <li>revert: Reverts a previous commit</li> </ul>"},{"location":"contributing/#scope","title":"Scope","text":"<p>The scope could be anything specifying the place of the commit change. For example <code>api</code>, <code>model</code>, <code>controller</code>, etc.</p>"},{"location":"contributing/#subject","title":"Subject","text":"<p>The subject contains a succinct description of the change:</p> <ul> <li>Use the imperative, present tense: \"change\" not \"changed\" nor \"changes\"</li> <li>Don't capitalize the first letter</li> <li>No dot (.) at the end</li> </ul>"},{"location":"contributing/#body","title":"Body","text":"<p>The body should include the motivation for the change and contrast this with previous behavior.</p>"},{"location":"contributing/#footer","title":"Footer","text":"<p>The footer should contain any information about Breaking Changes and is also the place to reference GitHub issues that this commit Closes.</p>"},{"location":"contributing/#examples","title":"Examples","text":"<pre><code>feat(auth): add ability to login with Google\n\nImplement Google OAuth login flow using the Google API client library.\n\nCloses #123\n</code></pre> <pre><code>fix(api): prevent race condition in request handler\n\nThe request handler was not properly synchronized, which could lead to data corruption.\n\nFixes #456\n</code></pre>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure any install or build dependencies are removed before the end of the layer when doing a build.</li> <li>Update the README.md with details of changes to the interface, this includes new environment variables, exposed ports, useful file locations, and container parameters.</li> <li>Increase the version numbers in any examples files and the README.md to the new version that this Pull Request would represent.</li> <li>The Pull Request will be merged once you have the sign-off of at least one other developer, or if you do not have permission to do that, you may request the reviewer to merge it for you.</li> </ol>"},{"location":"contributing/#mkdocs","title":"MKDocs","text":"<p>You don't really need to run through this to make edits to MKDocs, but if you want to see the layout and what it looks like served, check this guide.</p> <p>This assumes that you have Python installed locally.</p>"},{"location":"contributing/#mkdocs-setup","title":"MKDocs: Setup","text":"<p>We use Material for MkDocs theme and several extensions. To set up your local environment, install the dependencies from the requirements file:</p> <pre><code># From the project root\npip install -r docs/requirements.txt\n</code></pre> <p>This ensures you're using the same versions of packages as the CI/CD pipeline and other contributors.</p>"},{"location":"contributing/#updating-dependencies","title":"Updating Dependencies","text":"<p>If you need to add or update dependencies for the documentation:</p> <ol> <li>Update the <code>docs/requirements.txt</code> file with the new package or version</li> <li>Test locally to ensure everything works as expected</li> <li>Commit the changes to the requirements file</li> </ol> <p>We pin specific versions in the requirements file to ensure consistent builds across different environments.</p>"},{"location":"contributing/#mkdocs-commands","title":"MKDocs: Commands","text":"<p>When entering these commands, go to <code>/docs</code> instead of being in the project's root folder <code>/</code>.</p> <ul> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"contributing/#mkdocs-ideal-workflow","title":"MKDocs: Ideal workflow","text":"<ol> <li>Make changes</li> <li>See changes made using <code>mkdocs serve</code></li> <li>Commit and push your changes to the main branch</li> </ol>"},{"location":"contributing/#material-for-mkdocs-features","title":"Material for MkDocs Features","text":"<p>Our documentation uses Material for MkDocs with several features enabled:</p>"},{"location":"contributing/#theme-features","title":"Theme Features","text":"<ul> <li>Navigation Instant: Provides faster page loading</li> <li>Navigation Tracking: Automatically focuses the current section in the navigation</li> <li>Navigation Expand: Expands all collapsible sections in the navigation</li> <li>Navigation Indexes: Adds index pages to sections</li> <li>Content Code Copy: Adds a copy button to code blocks</li> </ul>"},{"location":"contributing/#markdown-extensions","title":"Markdown Extensions","text":"<p>We've enabled several markdown extensions that you can use in your documentation:</p> <ul> <li> <p>Admonitions: Create call-out blocks for notes, warnings, etc.   <pre><code>!!! note \"Optional Title\"\n    This is a note admonition.\n</code></pre></p> </li> <li> <p>Code Highlighting: Syntax highlighting for code blocks   <pre><code>```python\ndef hello_world():\n    print(\"Hello, world!\")\n</code></pre>   ```</p> </li> <li> <p>Tabbed Content: Create tabbed content sections   <pre><code>=== \"Tab 1\"\n    Content of tab 1\n\n=== \"Tab 2\"\n    Content of tab 2\n</code></pre></p> </li> <li> <p>Tables: Create tables using markdown syntax   <pre><code>| Header 1 | Header 2 |\n| -------- | -------- |\n| Cell 1   | Cell 2   |\n</code></pre></p> </li> </ul> <p>For more details on how to use these features, refer to the Material for MkDocs documentation.</p>"},{"location":"contributing/#mkdocs-automated-deployment","title":"MKDocs: Automated Deployment","text":"<p>The documentation is automatically deployed to GitHub Pages when changes are pushed to the main branch. This is handled by a GitHub Actions workflow that:</p> <ol> <li>Builds the MkDocs site</li> <li>Deploys it to the gh-pages branch</li> <li>Makes it available at the project's GitHub Pages URL</li> </ol> <p>You don't need to manually build or deploy the documentation - just push your changes to the main branch, and the workflow will handle the rest.</p>"},{"location":"logging/","title":"Logging System","text":"<p>Cherry Backend includes a simple but effective logging system that writes logs to files grouped by day. This document explains how the logging system works and how to use it in your code.</p>"},{"location":"logging/#overview","title":"Overview","text":"<p>The logging system is designed to:</p> <ul> <li>Write logs to files that are grouped by day (one file per day)</li> <li>Store logs in platform-specific locations:</li> <li>On Windows: in a <code>logs</code> directory in the repository</li> <li>On Linux: in <code>/var/log/cherry</code></li> <li>Provide basic logging levels: Info, Error, Debug, and Warn</li> <li>Be thread-safe for concurrent logging</li> <li>Automatically rotate log files based on the date</li> </ul>"},{"location":"logging/#log-file-format","title":"Log File Format","text":"<p>Log files are named using the format <code>cherry-YYYY-MM-DD.log</code>, where <code>YYYY-MM-DD</code> is the date. For example, logs for July 18, 2025 would be stored in <code>cherry-2025-07-18.log</code>.</p> <p>Each log entry has the following format:</p> <pre><code>[YYYY-MM-DD HH:MM:SS] [LEVEL] MESSAGE\n</code></pre> <p>For example:</p> <pre><code>[2025-07-18 15:04:05] [INFO] Processing webhook event: item:added\n[2025-07-18 15:04:05] [ERROR] Failed to process webhook: invalid signature\n</code></pre>"},{"location":"logging/#using-the-logger","title":"Using the Logger","text":""},{"location":"logging/#creating-a-logger","title":"Creating a Logger","text":"<p>To use the logging system in your code, you need to create a logger instance:</p> <pre><code>import \"cherry_backend/internal/logging\"\n\n// Create a new logger\nlogger, err := logging.NewLogger()\nif err != nil {\n    // Handle error\n}\ndefer logger.Close() // Don't forget to close the logger when done\n</code></pre>"},{"location":"logging/#logging-messages","title":"Logging Messages","text":"<p>The logger provides four methods for logging messages at different levels:</p> <pre><code>// Informational messages\nlogger.Info(\"Processing webhook event: %s\", eventName)\n\n// Error messages\nlogger.Error(\"Failed to process webhook: %v\", err)\n\n// Debug messages\nlogger.Debug(\"Request details: %+v\", request)\n\n// Warning messages\nlogger.Warn(\"TODOIST_CLIENT_SECRET not set\")\n</code></pre>"},{"location":"logging/#in-the-todoistserviceimpl","title":"In the TodoistServiceImpl","text":"<p>The <code>TodoistServiceImpl</code> already includes a logger that is initialized in the constructor:</p> <pre><code>// Create a new TodoistServiceImpl with a logger\nservice, err := NewTodoistServiceImpl()\nif err != nil {\n    // Handle error\n}\n\n// Use the logger\nservice.Logger.Info(\"Processing webhook event: %s\", eventName)\n</code></pre>"},{"location":"logging/#log-file-locations","title":"Log File Locations","text":""},{"location":"logging/#windows","title":"Windows","text":"<p>On Windows, log files are stored in a <code>logs</code> directory in the repository root:</p> <pre><code>C:\\path\\to\\cherry_backend\\logs\\cherry-2025-07-18.log\n</code></pre>"},{"location":"logging/#linux","title":"Linux","text":"<p>On Linux, log files are stored in <code>/var/log/cherry</code>:</p> <pre><code>/var/log/cherry/cherry-2025-07-18.log\n</code></pre> <p>Make sure the application has write permissions to this directory.</p>"},{"location":"logging/#implementation-details","title":"Implementation Details","text":"<p>The logging system is implemented in the <code>internal/logging</code> package and consists of:</p> <ul> <li>A <code>Logger</code> interface that defines the logging methods</li> <li>A <code>LoggerImpl</code> struct that implements the interface</li> <li>Functions for creating a new logger, rotating log files, and writing log messages</li> </ul> <p>The implementation uses a mutex to ensure thread safety and checks the date on each log write to determine if a log rotation is needed.</p>"},{"location":"logging/#limitations-and-future-improvements","title":"Limitations and Future Improvements","text":"<p>The current logging system is simple and meets the basic requirements, but it has some limitations:</p> <ol> <li> <p>No log level filtering: All log messages are written to the log file regardless of their level. A future improvement could add the ability to set a minimum log level.</p> </li> <li> <p>No log compression: Old log files are not compressed or archived. A future improvement could add automatic compression of old log files.</p> </li> <li> <p>No log retention policy: Log files are never deleted. A future improvement could add a retention policy to delete or archive old log files.</p> </li> <li> <p>Limited configuration: The log file location and format are hardcoded. A future improvement could make these configurable.</p> </li> <li> <p>No structured logging: The current system uses simple text logging. A future improvement could add support for structured logging formats like JSON.</p> </li> <li> <p>No remote logging: Logs are only written to local files. A future improvement could add support for sending logs to remote systems.</p> </li> <li> <p>No log correlation: There's no way to correlate logs across different services or requests. A future improvement could add support for trace IDs or correlation IDs.</p> </li> </ol>"},{"location":"logging/#testing","title":"Testing","text":"<p>The logging system includes tests that verify:</p> <ol> <li>A logger can be created</li> <li>Log messages are written to the log file</li> <li>Log files are rotated based on the date</li> </ol> <p>To run the tests:</p> <pre><code>go test -v ./internal/logging\n</code></pre> <p>The tests use a temporary directory for log files to avoid interfering with the actual application logs.</p>"}]}