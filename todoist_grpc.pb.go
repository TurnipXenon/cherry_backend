// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: todoist.proto

package apiv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TodoistService_ProcessWebhook_FullMethodName = "/cherry.api.v1.TodoistService/ProcessWebhook"
)

// TodoistServiceClient is the client API for TodoistService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// TodoistService defines the Todoist webhook API
type TodoistServiceClient interface {
	// ProcessWebhook processes incoming webhook notifications from Todoist
	ProcessWebhook(ctx context.Context, in *TodoistWebhookRequest, opts ...grpc.CallOption) (*TodoistWebhookResponse, error)
}

type todoistServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTodoistServiceClient(cc grpc.ClientConnInterface) TodoistServiceClient {
	return &todoistServiceClient{cc}
}

func (c *todoistServiceClient) ProcessWebhook(ctx context.Context, in *TodoistWebhookRequest, opts ...grpc.CallOption) (*TodoistWebhookResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TodoistWebhookResponse)
	err := c.cc.Invoke(ctx, TodoistService_ProcessWebhook_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TodoistServiceServer is the server API for TodoistService service.
// All implementations must embed UnimplementedTodoistServiceServer
// for forward compatibility.
//
// TodoistService defines the Todoist webhook API
type TodoistServiceServer interface {
	// ProcessWebhook processes incoming webhook notifications from Todoist
	ProcessWebhook(context.Context, *TodoistWebhookRequest) (*TodoistWebhookResponse, error)
	mustEmbedUnimplementedTodoistServiceServer()
}

// UnimplementedTodoistServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTodoistServiceServer struct{}

func (UnimplementedTodoistServiceServer) ProcessWebhook(context.Context, *TodoistWebhookRequest) (*TodoistWebhookResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ProcessWebhook not implemented")
}
func (UnimplementedTodoistServiceServer) mustEmbedUnimplementedTodoistServiceServer() {}
func (UnimplementedTodoistServiceServer) testEmbeddedByValue()                        {}

// UnsafeTodoistServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TodoistServiceServer will
// result in compilation errors.
type UnsafeTodoistServiceServer interface {
	mustEmbedUnimplementedTodoistServiceServer()
}

func RegisterTodoistServiceServer(s grpc.ServiceRegistrar, srv TodoistServiceServer) {
	// If the following call pancis, it indicates UnimplementedTodoistServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TodoistService_ServiceDesc, srv)
}

func _TodoistService_ProcessWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TodoistWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TodoistServiceServer).ProcessWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TodoistService_ProcessWebhook_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TodoistServiceServer).ProcessWebhook(ctx, req.(*TodoistWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TodoistService_ServiceDesc is the grpc.ServiceDesc for TodoistService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TodoistService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "cherry.api.v1.TodoistService",
	HandlerType: (*TodoistServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ProcessWebhook",
			Handler:    _TodoistService_ProcessWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "todoist.proto",
}
